version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: ankane/pgvector:latest
    container_name: threatmodel-postgres
    environment:
      POSTGRES_USER: threatmodel
      POSTGRES_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      POSTGRES_DB: threatmodel_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/architecture/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatmodel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: threatmodel-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: threatmodel-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: threatmodel-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: threatmodel-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-threatmodel}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./backend/services/auth
      dockerfile: Dockerfile
    container_name: threatmodel-auth
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://threatmodel:${DB_PASSWORD:-threatmodel123}@postgres:5432/threatmodel_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-your-super-secret-refresh-key}
      REFRESH_TOKEN_EXPIRES_IN: 7d
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"

  # Core Service
  core-service:
    build:
      context: ./backend/services/core
      dockerfile: Dockerfile
    container_name: threatmodel-core
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatmodel_db
      DB_USER: threatmodel
      DB_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-threatmodel}:${RABBITMQ_PASSWORD:-rabbitmq123}@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3002:3002"

  # AI Service (Node.js)
  ai-service:
    build:
      context: ./backend/services/ai
      dockerfile: Dockerfile
    container_name: threatmodel-ai
    environment:
      NODE_ENV: development
      PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatmodel_db
      DB_USER: threatmodel
      DB_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3003:3003"

  # Diagram Service
  diagram-service:
    build:
      context: ./backend/services/diagram
      dockerfile: Dockerfile
    container_name: threatmodel-diagram
    environment:
      NODE_ENV: development
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatmodel_db
      DB_USER: threatmodel
      DB_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3004:3004"

  # Report Service
  report-service:
    build:
      context: ./backend/services/reporting
      dockerfile: Dockerfile
    container_name: threatmodel-report
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://threatmodel:${DB_PASSWORD:-threatmodel123}@postgres:5432/threatmodel_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      REPORT_OUTPUT_DIR: /tmp/reports
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "3005:3005"

  # Integration Service
  integration-service:
    build:
      context: ./backend/services/integration
      dockerfile: Dockerfile
    container_name: threatmodel-integration
    environment:
      NODE_ENV: development
      PORT: 3008
      DATABASE_URL: postgresql://threatmodel:${DB_PASSWORD:-threatmodel123}@postgres:5432/threatmodel_db
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatmodel_db
      DB_USER: threatmodel
      DB_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3006
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3008:3008"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./backend/services/notification
      dockerfile: Dockerfile
    container_name: threatmodel-notification
    environment:
      NODE_ENV: development
      TS_NODE_TRANSPILE_ONLY: true
      PORT: 3009
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatmodel_db
      DB_USER: threatmodel
      DB_PASSWORD: ${DB_PASSWORD:-threatmodel123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER}
      WEBHOOK_URL: ${WEBHOOK_URL}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3006
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3009:3009"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TMAC Service
  tmac-service:
    build:
      context: ./backend/services/tmac
      dockerfile: Dockerfile.standalone
    container_name: threatmodel-tmac
    environment:
      NODE_ENV: development
      PORT: 3010
      LOG_LEVEL: info
    ports:
      - "3010:3010"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    container_name: threatmodel-gateway
    environment:
      NODE_ENV: development
      PORT: 3000
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      CORE_SERVICE_URL: http://core-service:3002
      AI_SERVICE_URL: http://ai-service:3003
      DIAGRAM_SERVICE_URL: http://diagram-service:3004
      REPORT_SERVICE_URL: http://report-service:3005
      INTEGRATION_SERVICE_URL: http://integration-service:3008
      NOTIFICATION_SERVICE_URL: http://notification-service:3009
      TMAC_SERVICE_URL: http://tmac-service:3010
    depends_on:
      - auth-service
      - core-service
      - diagram-service
      - report-service
      - integration-service
      - notification-service
    ports:
      - "3000:3000"

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: threatmodel-frontend
    environment:
      API_GATEWAY_URL: http://api-gateway:3000
      ENVIRONMENT: production
    depends_on:
      - api-gateway
    ports:
      - "3006:3006"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database UI)
  adminer:
    image: adminer
    container_name: threatmodel-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  # Grafana (Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: threatmodel-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3007:3000"

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: threatmodel-prometheus
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/alerting/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    depends_on:
      - alertmanager

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: threatmodel-alertmanager
    volumes:
      - ./infrastructure/alerting/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"

  # Notification Service
  notification:
    build:
      context: ./backend/services/notification
      dockerfile: Dockerfile
    container_name: threatmodel-notification
    environment:
      NODE_ENV: production
      PORT: 3017
      DATABASE_URL: postgresql://threatmodel:${DB_PASSWORD:-threatmodel123}@postgres:5432/threatmodel_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      
      # Email Configuration (Optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-}
      
      # Slack Configuration (Optional)
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN:-}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET:-}
      
      # Teams Configuration (Optional)
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL:-}
      
      # SMS Configuration (Optional)
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER:-}
      
      # Webhook Configuration (Optional)
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET:-}
    ports:
      - "3017:3017"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  rabbitmq_data:
  ai_models:
  grafana_data:
  prometheus_data:
  alertmanager_data:

networks:
  default:
    name: threatmodel-network
version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: threatmodel-postgres
    environment:
      POSTGRES_USER: threatmodel_user
      POSTGRES_PASSWORD: threatmodel_dev_pass
      POSTGRES_DB: threatmodel_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatmodel_user -d threatmodel_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - threatmodel-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: threatmodel-redis
    command: redis-server --appendonly yes --requirepass threatmodel_redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - threatmodel-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: threatmodel-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: threatmodel_minio
      MINIO_ROOT_PASSWORD: threatmodel_minio_pass
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - threatmodel-network

  # RabbitMQ for message queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: threatmodel-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: threatmodel_rabbit
      RABBITMQ_DEFAULT_PASS: threatmodel_rabbit_pass
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - threatmodel-network

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: threatmodel-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - threatmodel-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: threatmodel-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - threatmodel-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: threatmodel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - threatmodel-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: threatmodel-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: threatmodel_grafana_pass
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - threatmodel-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: threatmodel-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - threatmodel-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: threatmodel-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@threatmodel.local
      PGADMIN_DEFAULT_PASSWORD: threatmodel_pgadmin_pass
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - threatmodel-network

networks:
  threatmodel-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  rabbitmq_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
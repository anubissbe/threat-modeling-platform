version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth-service-postgres
    environment:
      POSTGRES_USER: authservice_user
      POSTGRES_PASSWORD: authservice_dev_pass
      POSTGRES_DB: authservice_dev
    ports:
      - "5433:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authservice_user -d authservice_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for sessions and caching
  redis:
    image: redis:7-alpine
    container_name: auth-service-redis
    command: redis-server --requirepass authservice_redis_pass
    ports:
      - "6380:6379"
    volumes:
      - auth_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "authservice_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service (for running with docker-compose)
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: auth-service
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://authservice_user:authservice_dev_pass@postgres:5432/authservice_dev
      REDIS_URL: redis://:authservice_redis_pass@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-for-development-only
      JWT_ACCESS_TOKEN_TTL: 15m
      JWT_REFRESH_TOKEN_TTL: 7d
      PASSWORD_PEPPER: your-password-pepper-for-development
      LOG_LEVEL: debug
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: auth-service-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: auth-service-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:authservice_redis_pass
    depends_on:
      - redis

volumes:
  auth_postgres_data:
  auth_redis_data:

networks:
  default:
    name: auth-service-network
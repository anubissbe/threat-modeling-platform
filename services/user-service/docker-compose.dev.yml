version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: user-service-postgres
    environment:
      POSTGRES_USER: userservice_user
      POSTGRES_PASSWORD: userservice_dev_pass
      POSTGRES_DB: userservice_dev
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    ports:
      - "5434:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice_user -d userservice_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: user-service-redis
    command: redis-server --requirepass userservice_redis_pass --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"
    volumes:
      - user_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "userservice_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service (for running with docker-compose)
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      NODE_ENV: development
      PORT: 8081
      DATABASE_URL: postgresql://userservice_user:userservice_dev_pass@postgres:5432/userservice_dev
      REDIS_URL: redis://:userservice_redis_pass@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-for-development-only
      AUTH_SERVICE_URL: http://auth-service:8080
      API_KEY: internal-service-api-key-for-development
      LOG_LEVEL: debug
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - user-service-network
      - auth-service-network

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: user-service-adminer
    ports:
      - "8083:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - user-service-network

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: user-service-redis-commander
    ports:
      - "8084:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:userservice_redis_pass
    depends_on:
      - redis
    networks:
      - user-service-network

volumes:
  user_postgres_data:
  user_redis_data:

networks:
  user-service-network:
    name: user-service-network
  auth-service-network:
    external: true
    name: auth-service-network
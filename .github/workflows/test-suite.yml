name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  CI: true

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint backend
      run: |
        cd backend/services/auth
        npm run lint
        
    - name: Type check backend
      run: |
        cd backend/services/auth
        npm run typecheck
        
    - name: Lint frontend
      run: |
        cd frontend
        npm run lint
        
    - name: Type check frontend
      run: |
        cd frontend
        npm run typecheck

  unit-tests-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: threatmodel123
          POSTGRES_USER: threatmodel
          POSTGRES_DB: threatmodel_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run auth service tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        SESSION_SECRET: test-session-secret
        MASTER_ENCRYPTION_KEY: test-32char-encryption-key-12345678901234567890
      run: |
        cd backend/services/auth
        npm test -- --coverage --passWithNoTests
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/services/auth/coverage/lcov.info
        flags: backend
        name: backend-coverage

  unit-tests-frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --run
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: threatmodel123
          POSTGRES_USER: threatmodel
          POSTGRES_DB: threatmodel_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build auth service
      run: |
        cd backend/services/auth
        npm run build
        
    - name: Start auth service
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        SESSION_SECRET: test-session-secret
        MASTER_ENCRYPTION_KEY: test-32char-encryption-key-12345678901234567890
        PORT: 3001
      run: |
        cd backend/services/auth
        npm start &
        sleep 10
        
    - name: Run integration tests
      env:
        API_BASE_URL: http://localhost:3001
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd backend/services/auth
        npm run test:integration

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: threatmodel123
          POSTGRES_USER: threatmodel
          POSTGRES_DB: threatmodel_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: Build auth service
      run: |
        cd backend/services/auth
        npm run build
        
    - name: Start auth service
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        SESSION_SECRET: test-session-secret
        MASTER_ENCRYPTION_KEY: test-32char-encryption-key-12345678901234567890
        PORT: 3001
        CORS_ORIGIN: http://localhost:3006
      run: |
        cd backend/services/auth
        npm start &
        sleep 10
        
    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        sleep 10
        
    - name: Wait for services
      run: |
        npx wait-on http://localhost:3001/health http://localhost:3006 --timeout 60000
        
    - name: Run E2E tests
      env:
        E2E_BASE_URL: http://localhost:3006
        E2E_API_URL: http://localhost:3001
      run: |
        cd frontend
        npm run test:e2e
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-test-results
        path: frontend/test-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: threatmodel123
          POSTGRES_USER: threatmodel
          POSTGRES_DB: threatmodel_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        SESSION_SECRET: test-session-secret
        MASTER_ENCRYPTION_KEY: test-32char-encryption-key-12345678901234567890
      run: |
        cd backend/services/auth
        npm run test:security
        
    - name: Run dependency audit
      run: |
        npm audit --audit-level=moderate
        cd backend/services/auth
        npm audit --audit-level=moderate
        cd ../../frontend
        npm audit --audit-level=moderate
        
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3006'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: threatmodel123
          POSTGRES_USER: threatmodel
          POSTGRES_DB: threatmodel_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Build and start services
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: threatmodel_db_test
        DB_USER: threatmodel
        DB_PASSWORD: threatmodel123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        JWT_REFRESH_SECRET: test-refresh-secret
        SESSION_SECRET: test-session-secret
        MASTER_ENCRYPTION_KEY: test-32char-encryption-key-12345678901234567890
        PORT: 3001
      run: |
        cd backend/services/auth
        npm run build
        npm start &
        sleep 10
        
    - name: Run performance tests
      run: |
        k6 run tests/performance/auth-load-test.js
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests-backend, unit-tests-frontend, integration-tests, e2e-tests, security-tests, performance-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.unit-tests-backend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.unit-tests-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY